<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogenerated.cs" #>
//====================================================================================================
// <auto-generated>       THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY       </auto-generated>
//====================================================================================================

using System.Collections.Generic;

namespace Enderlook.Unity.Pathfinding
{
    /// <inheritdoc cref="AStarStatic"/>
    public sealed class AStar<TNode>
    {
<#
    foreach (bool hasTNodes in new bool[] { false, true })
    {
        string IfHasTNodes(string write) => hasTNodes ? write : "";

        foreach (bool hasWatchdog in new bool[] { false, true })
        {
            string IfHasWatchdog(string write) => hasWatchdog ? write : "";
#>
        /// <inheritdoc cref="DijkstraStatic{TNode}.CalculatePath{TFinder, TBuilder <#= IfHasWatchdog(", TWatchdog") #> <#= IfHasTNodes(", TNodes") #>}(TNode, TFinder, TBuilder <#= IfHasWatchdog(", TWatchdog") #>)"/>
        public void CalculatePath<TFinder, TBuilder <#= IfHasWatchdog(", TWatchdog") #> <#= IfHasTNodes(", TNodes") #>>(TNode from, TFinder finder, TBuilder builder <#= IfHasWatchdog(", TWatchdog watchdog") #>)
            where TFinder : IGraphIntrinsic<TNode <#= IfHasTNodes(", TNodes") #>>, IPathTargetFinderSatisfy<TNode>, IPathTargetFinderHeuristic<TNode>
            where TBuilder : IPathBuilder<TNode>
            <#= IfHasWatchdog("where TWatchdog : IWatchdog") #>
            <#= IfHasTNodes("where TNodes : IEnumerable<TNode>") #>
            => AStarStatic<TNode>.CalculatePath<TFinder, TBuilder <#= IfHasWatchdog(", TWatchdog") #> <#= IfHasTNodes(", TNodes") #>>(from, finder, builder <#= IfHasWatchdog(", watchdog") #>);

<#
        }
    }
#>
    }
}