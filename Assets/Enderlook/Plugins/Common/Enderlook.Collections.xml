<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enderlook.Collections</name>
    </assembly>
    <members>
        <member name="T:Enderlook.Collections.BinaryHeapMax`1">
            <summary>
            Represent a basic binary heap where elements with highest values have higher priority.
            </summary>
            <typeparam name="TData">Type of element.</typeparam>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`1.Count">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`1.Count"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`1.Capacity">
            <summary>
            Capacity of the heap.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`1.IsEmpty">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`1.IsEmpty"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.#ctor">
            <summary>
            Creates a new binary heap.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.#ctor(System.Int32)">
            <summary>
            Creates a binary heap with the specified capacity.
            </summary>
            <param name="capacity">Amount of elements than can be stored in it.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="capacity"/> is lower than 1.</exception>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.#ctor(`0[])">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.Clear">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Clear"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.Enqueue(`0)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Enqueue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.EnqueueRange(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.EnqueueRange(`0[])"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.Peek">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Peek"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.TryPeek(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.TryPeek(`0@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.Dequeue">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Dequeue"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.TryDequeue(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.TryDequeue(`0@)"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`1.System#Collections#Generic#ICollection{TData}#IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.System#Collections#Generic#ICollection{TData}#Add(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.System#Collections#Generic#ICollection{TData}#Contains(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.System#Collections#Generic#ICollection{TData}#CopyTo(`0[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.System#Collections#Generic#ICollection{TData}#Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.BinaryHeapMax`2">
            <summary>
            Represent a basic binary heap where elements with highest values have higher priority.
            </summary>
            <typeparam name="TData">Type of element.</typeparam>
            <typeparam name="TPriority">Type of priority.</typeparam>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`2.Count">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`2.Count"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`2.Capacity">
            <summary>
            Capacity of the heap.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`2.IsEmpty">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`2.IsEmpty"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.#ctor">
            <summary>
            Creates a new binary heap.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.#ctor(System.Int32)">
            <summary>
            Creates a binary heap with the specified capacity.
            </summary>
            <param name="capacity">Amount of elements than can be stored in it.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="capacity"/> is lower than 1.</exception>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.#ctor(System.ValueTuple{`0,`1}[])">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.Clear">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Clear"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.Enqueue(System.ValueTuple{`0,`1})">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.Enqueue((TData data, TPriority priority))"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.EnqueueRange(System.ValueTuple{`0,`1}[])">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.EnqueueRange((TData data, TPriority priority)[])"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.EnqueueRange(IEnumerable&lt;(TData data, TPriority priority)&gt;)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.Peek">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Peek"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.TryPeek(System.ValueTuple{`0,`1}@)">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.TryPeek(out (TData data, TPriority priority))"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.Dequeue">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Dequeue"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.TryDequeue(System.ValueTuple{`0,`1}@)">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.TryDequeue(out (TData data, TPriority priority))"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`2.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMax`2.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#Add(System.ValueTuple{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#Contains(System.ValueTuple{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#CopyTo(System.ValueTuple{`0,`1}[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#Remove(System.ValueTuple{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.Enqueue(`0,`1)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Enqueue(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.Enqueue(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Enqueue(System.Collections.Generic.KeyValuePair{`0,`1})"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.EnqueueRange(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.Collections.Generic.KeyValuePair{`0,`1}[])"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.TryPeek(`0@,`1@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.TryPeek(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.TryDequeue(`0@,`1@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMax`2.TryDequeue(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@)"/>
        </member>
        <member name="T:Enderlook.Collections.BinaryHeapMin`1">
            <summary>
            Represent a basic binary heap where elements with lowest values have higher priority.
            </summary>
            <typeparam name="TData">Type of element.</typeparam>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`1.Count">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`1.Count"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`1.Capacity">
            <summary>
            Capacity of the heap.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`1.IsEmpty">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`1.IsEmpty"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.#ctor">
            <summary>
            Creates a new binary heap.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.#ctor(System.Int32)">
            <summary>
            Creates a binary heap with the specified capacity.
            </summary>
            <param name="capacity">Amount of elements than can be stored in it.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="capacity"/> is lower than 1.</exception>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.#ctor(`0[])">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.Clear">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Clear"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.Enqueue(`0)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Enqueue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.EnqueueRange(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.EnqueueRange(`0[])"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.Peek">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Peek"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.TryPeek(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.TryPeek(`0@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.Dequeue">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.Dequeue"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.TryDequeue(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`1.TryDequeue(`0@)"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`1.System#Collections#Generic#ICollection{TData}#IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.System#Collections#Generic#ICollection{TData}#Add(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.System#Collections#Generic#ICollection{TData}#Contains(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.System#Collections#Generic#ICollection{TData}#CopyTo(`0[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.System#Collections#Generic#ICollection{TData}#Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.BinaryHeapMin`2">
            <summary>
            Represent a basic binary heap where elements with lowest values have higher priority.
            </summary>
            <typeparam name="TData">Type of element.</typeparam>
            <typeparam name="TPriority">Type of priority.</typeparam>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`2.Count">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`2.Count"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`2.Capacity">
            <summary>
            Capacity of the heap.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`2.IsEmpty">
            <inheritdoc cref="P:Enderlook.Collections.IPriorityQueue`2.IsEmpty"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.#ctor">
            <summary>
            Creates a new binary heap.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.#ctor(System.Int32)">
            <summary>
            Creates a binary heap with the specified capacity.
            </summary>
            <param name="capacity">Amount of elements than can be stored in it.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="capacity"/> is lower than 1.</exception>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.#ctor(System.ValueTuple{`0,`1}[])">
            <summary>
            Creates a new binary heap.
            </summary>
            <param name="values">Elements to add to the heap.</param>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.Clear">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Clear"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.Enqueue(System.ValueTuple{`0,`1})">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.Enqueue((TData data, TPriority priority))"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.EnqueueRange(System.ValueTuple{`0,`1}[])">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.EnqueueRange((TData data, TPriority priority)[])"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.EnqueueRange(IEnumerable&lt;(TData data, TPriority priority)&gt;)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.Peek">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Peek"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.TryPeek(System.ValueTuple{`0,`1}@)">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.TryPeek(out (TData data, TPriority priority))"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.Dequeue">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Dequeue"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.TryDequeue(System.ValueTuple{`0,`1}@)">
            <inheritdoc cref="!:IPriorityQueue&lt;TData, TPriority&gt;.TryDequeue(out (TData data, TPriority priority))"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`2.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="P:Enderlook.Collections.BinaryHeapMin`2.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#Add(System.ValueTuple{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#Contains(System.ValueTuple{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#CopyTo(System.ValueTuple{`0,`1}[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.System#Collections#Generic#ICollection{(TDatadata,TPrioritypriority)}#Remove(System.ValueTuple{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.Enqueue(`0,`1)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Enqueue(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.Enqueue(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.Enqueue(System.Collections.Generic.KeyValuePair{`0,`1})"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.EnqueueRange(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.Collections.Generic.KeyValuePair{`0,`1}[])"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.TryPeek(`0@,`1@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.TryPeek(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.TryDequeue(`0@,`1@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.BinaryHeapMin`2.TryDequeue(`0@)">
            <inheritdoc cref="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@)"/>
        </member>
        <member name="T:Enderlook.Collections.IPriorityQueue`1">
            <summary>
            Represent a queue where each element has a priority
            </summary>
            <typeparam name="T">Type of element</typeparam>
        </member>
        <member name="P:Enderlook.Collections.IPriorityQueue`1.Count">
            <inheritdoc cref="!:ICollection.Count"/>
        </member>
        <member name="P:Enderlook.Collections.IPriorityQueue`1.IsEmpty">
            <summary>
            Whenever the heap is empty or contains elements.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.Clear">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.Enqueue(`0)">
            <summary>
            Add an element.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add several elements.
            </summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.EnqueueRange(`0[])">
            <summary>
            Add several elements.
            </summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.Peek">
            <summary>
            Returns the element with the highest priority without consuming it.
            </summary>
            <return>Element with highest priority</return>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:Enderlook.Collections.IPriorityQueue`1.Count"/> is 0.</exception>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.TryPeek(`0@)">
            <summary>
            Try to return the element with the highest priority without consuming it.
            </summary>
            <param name="element">Element with highest priority, if any.</param>
            <return>Whenever an element was peek or not if the heap was empty.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.Dequeue">
            <summary>
            Consumes and return the element with the highest priority.
            </summary>
            <return>Element with the highest priority.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`1.TryDequeue(`0@)">
            <summary>
            Try to consume and return the element with the highest priority.
            </summary>
            <param name="element">Element with the highest priority, if any.</param>
            <return>Whenever an element was extracted or not if the heap was empty.</return>
        </member>
        <member name="T:Enderlook.Collections.IPriorityQueue`2">
            <summary>
            Represent a queue where each element has a priority
            </summary>
            <typeparam name="TData">Type of element.</typeparam>
            <typeparam name="TPriority">Type of priority.</typeparam>
        </member>
        <member name="P:Enderlook.Collections.IPriorityQueue`2.Count">
            <inheritdoc cref="!:ICollection.Count"/>
        </member>
        <member name="P:Enderlook.Collections.IPriorityQueue`2.IsEmpty">
            <summary>
            Whenever the heap is empty or contains elements.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.Clear">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Add element <paramref name="data"/> with priority <paramref name="priority"/>.
            </summary>
            <param name="data">Element to add.</param>
            <param name="priority">Priority of the element.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.Enqueue(System.ValueTuple{`0,`1})">
            <summary>
            Add element with priority.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.Enqueue(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add element with priority.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Add several elements.
            </summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Add several elements.
            </summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.ValueTuple{`0,`1}[])">
            <summary>
            Add several elements.
            </summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.EnqueueRange(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <summary>
            Add several elements.
            </summary>
            <param name="elements">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.Peek">
            <summary>
            Returns the element with the highest priority without consuming it.
            </summary>
            <return>Element with highest priority</return>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:Enderlook.Collections.IPriorityQueue`2.Count"/> is 0.</exception>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.TryPeek(System.ValueTuple{`0,`1}@)">
            <summary>
            Try to return the element with the highest priority without consuming it.
            </summary>
            <param name="element">Element with highest priority, if any.</param>
            <return>Whenever an element was peek or not if the heap was empty.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.TryPeek(`0@,`1@)">
            <summary>
            Try to return the element with the highest priority without consuming it.
            </summary>
            <param name="data">Element with highest priority, if any.</param>
            <param name="priority">Priority of that element, if any.</param>
            <return>Whenever an element was peek or not if the heap was empty.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.TryPeek(`0@)">
            <summary>
            Try to return the element with the highest priority without consuming it.
            </summary>
            <param name="data">Element with highest priority, if any.</param>
            <return>Whenever an element was peek or not if the heap was empty.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.Dequeue">
            <summary>
            Consumes and return the element with the highest priority.
            </summary>
            <return>Element with the highest priority.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(System.ValueTuple{`0,`1}@)">
            <summary>
            Try to consums and return the element with the highest priority.
            </summary>
            <param name="element">Element with the highest priority, if any.</param>
            <return>Whenever an element was extracted or not if the heap was empty.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@,`1@)">
            <summary>
            Try to consums and return the element with the highest priority.
            </summary>
            <param name="data">Element with highest priority, if any.</param>
            <param name="priority">Priority of that element, if any.</param>
            <return>Whenever an element was extracted or not if the heap was empty.</return>
        </member>
        <member name="M:Enderlook.Collections.IPriorityQueue`2.TryDequeue(`0@)">
            <summary>
            Try to consums and return the element with the highest priority.
            </summary>
            <param name="data">Element with highest priority, if any.</param>
            <return>Whenever an element was extracted or not if the heap was empty.</return>
        </member>
        <member name="T:Enderlook.Collections.ISpatialIndexBasic`1">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="key">Key of the node to insert.</param>
            <remarks>This is <c>O(log n)</c>.</remarks>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`1.Contains(`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`1.Remove(`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="T:Enderlook.Collections.ISpatialIndexBasic`2">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <remarks>This is <c>O(log n)</c>.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="key"/> was already contained.</exception>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)">
            <summary>
            Inserts a new node. If the node already exists, update its value.
            </summary>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <remarks>This is <c>O(log n)</c>.</remarks>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)">
            <summary>
            Check if the collection constains the given key.
            </summary>
            <param name="key">Key to check if exists.</param>
            <returns>Whenever the key <paramref name="key"/> is contained or not.</returns>
            <remarks>This <c>O(log n)</c></remarks>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)">
            <summary>
            Get the value associated with the given key.
            </summary>
            <param name="key">Key of the value to retrive.</param>
            <returns>Value of the key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when <paramref name="key"/> is not found.</exception>
            <remarks>This <c>O(log n)</c></remarks>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)">
            <summary>
            Get the value associated with the given key.
            </summary>
            <param name="key">Key of the value to retrive.</param>
            <param name="value">Value of the key, if the key was found.</param>
            <returns>Whenever the key was found or not.</returns>
            <remarks>This <c>O(log n)</c></remarks>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="key">Key of node to remove.</param>
            <return>Whenever the node with the given key was found and removed.</return>
        </member>
        <member name="T:Enderlook.Collections.ISpatialIndex`1">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndex`2"/>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="T:Enderlook.Collections.ISpatialIndex`2">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)">
            <summary>
            Find the neighbour with the nearest key <paramref name="key"/> using Euclidean distance.
            </summary>
            <param name="key">Reference key.</param>
            <returns>Nearest neighbour.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the tree is empty.</exception>
        </member>
        <member name="T:Enderlook.Collections.D2TreeDecimal">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.Insert(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.Contains(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.Remove(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.CreateBalanced(System.ValueTuple{System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDecimal.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;decimal&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDecimal.Count">
            <inheritdoc cref="!:D2Tree&lt;decimal&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeDecimal`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.Insert(System.ValueTuple{System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.InsertOrUpdate(System.ValueTuple{System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.Contains(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.GetValue(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.TryGetValue(System.ValueTuple{System.Decimal,System.Decimal},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.Remove(System.ValueTuple{System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDecimal`1.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;decimal, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDecimal`1.Count">
            <inheritdoc cref="!:D2Tree&lt;decimal, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDecimal`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeDouble">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.Insert(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.Contains(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.Remove(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.CreateBalanced(System.ValueTuple{System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.RemoveRange(System.ValueTuple{System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDouble.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;double&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDouble.Count">
            <inheritdoc cref="!:D2Tree&lt;double&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeDouble`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.Insert(System.ValueTuple{System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.InsertOrUpdate(System.ValueTuple{System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.Contains(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.GetValue(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.TryGetValue(System.ValueTuple{System.Double,System.Double},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.Remove(System.ValueTuple{System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.RemoveRange(System.ValueTuple{System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDouble`1.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;double, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeDouble`1.Count">
            <inheritdoc cref="!:D2Tree&lt;double, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeDouble`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeFloat">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.Insert(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.Contains(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.Remove(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.CreateBalanced(System.ValueTuple{System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.RemoveRange(System.ValueTuple{System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeFloat.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;float&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeFloat.Count">
            <inheritdoc cref="!:D2Tree&lt;float&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeFloat`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.Insert(System.ValueTuple{System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.InsertOrUpdate(System.ValueTuple{System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.Contains(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.GetValue(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.TryGetValue(System.ValueTuple{System.Single,System.Single},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.Remove(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.RemoveRange(System.ValueTuple{System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeFloat`1.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;float, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeFloat`1.Count">
            <inheritdoc cref="!:D2Tree&lt;float, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeFloat`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.Insert(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.Contains(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.Remove(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.CreateBalanced(System.ValueTuple{System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.RemoveRange(System.ValueTuple{System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeInt.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;int&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeInt.Count">
            <inheritdoc cref="!:D2Tree&lt;int&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.Insert(System.ValueTuple{System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.InsertOrUpdate(System.ValueTuple{System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.Contains(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.GetValue(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.TryGetValue(System.ValueTuple{System.Int32,System.Int32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.Remove(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.RemoveRange(System.ValueTuple{System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeInt`1.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;int, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeInt`1.Count">
            <inheritdoc cref="!:D2Tree&lt;int, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeLong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.Insert(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.Contains(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.Remove(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.CreateBalanced(System.ValueTuple{System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.RemoveRange(System.ValueTuple{System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeLong.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;long&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeLong.Count">
            <inheritdoc cref="!:D2Tree&lt;long&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeLong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.Insert(System.ValueTuple{System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.InsertOrUpdate(System.ValueTuple{System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.Contains(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.GetValue(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.TryGetValue(System.ValueTuple{System.Int64,System.Int64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.Remove(System.ValueTuple{System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.RemoveRange(System.ValueTuple{System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeLong`1.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;long, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeLong`1.Count">
            <inheritdoc cref="!:D2Tree&lt;long, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeLong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeUInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.Insert(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.Contains(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.Remove(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.CreateBalanced(System.ValueTuple{System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeUInt.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;uint&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeUInt.Count">
            <inheritdoc cref="!:D2Tree&lt;uint&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeUInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.Insert(System.ValueTuple{System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.InsertOrUpdate(System.ValueTuple{System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.Contains(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.GetValue(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.TryGetValue(System.ValueTuple{System.UInt32,System.UInt32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.Remove(System.ValueTuple{System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeUInt`1.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;uint, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeUInt`1.Count">
            <inheritdoc cref="!:D2Tree&lt;uint, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeUInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeULong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.Insert(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.Contains(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.Remove(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.CreateBalanced(System.ValueTuple{System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeULong.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;ulong&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeULong.Count">
            <inheritdoc cref="!:D2Tree&lt;ulong&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2TreeULong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.Insert(System.ValueTuple{System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.InsertOrUpdate(System.ValueTuple{System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.Contains(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.GetValue(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.TryGetValue(System.ValueTuple{System.UInt64,System.UInt64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.Remove(System.ValueTuple{System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeULong`1.IsEmpty">
            <inheritdoc cref="!:D2Tree&lt;ulong, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D2TreeULong`1.Count">
            <inheritdoc cref="!:D2Tree&lt;ulong, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2TreeULong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeDecimal">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.Insert(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.Contains(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.Remove(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.CreateBalanced(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDecimal.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;decimal&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDecimal.Count">
            <inheritdoc cref="!:D3Tree&lt;decimal&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeDecimal`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.Insert(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.InsertOrUpdate(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.Contains(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.GetValue(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.TryGetValue(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.Remove(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDecimal`1.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;decimal, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDecimal`1.Count">
            <inheritdoc cref="!:D3Tree&lt;decimal, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDecimal`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeDouble">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.Insert(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.Contains(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.Remove(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.CreateBalanced(System.ValueTuple{System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.RemoveRange(System.ValueTuple{System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDouble.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;double&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDouble.Count">
            <inheritdoc cref="!:D3Tree&lt;double&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeDouble`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.Insert(System.ValueTuple{System.Double,System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.InsertOrUpdate(System.ValueTuple{System.Double,System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.Contains(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.GetValue(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.TryGetValue(System.ValueTuple{System.Double,System.Double,System.Double},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.Remove(System.ValueTuple{System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Double,System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Double,System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.RemoveRange(System.ValueTuple{System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDouble`1.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;double, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeDouble`1.Count">
            <inheritdoc cref="!:D3Tree&lt;double, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeDouble`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeFloat">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.Insert(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.Contains(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.Remove(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.CreateBalanced(System.ValueTuple{System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.RemoveRange(System.ValueTuple{System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeFloat.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;float&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeFloat.Count">
            <inheritdoc cref="!:D3Tree&lt;float&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeFloat`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.Insert(System.ValueTuple{System.Single,System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.InsertOrUpdate(System.ValueTuple{System.Single,System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.Contains(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.GetValue(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.TryGetValue(System.ValueTuple{System.Single,System.Single,System.Single},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.Remove(System.ValueTuple{System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Single,System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Single,System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.RemoveRange(System.ValueTuple{System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeFloat`1.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;float, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeFloat`1.Count">
            <inheritdoc cref="!:D3Tree&lt;float, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeFloat`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.Insert(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.Contains(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.Remove(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.CreateBalanced(System.ValueTuple{System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.RemoveRange(System.ValueTuple{System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeInt.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;int&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeInt.Count">
            <inheritdoc cref="!:D3Tree&lt;int&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.Insert(System.ValueTuple{System.Int32,System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.InsertOrUpdate(System.ValueTuple{System.Int32,System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.Contains(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.GetValue(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.TryGetValue(System.ValueTuple{System.Int32,System.Int32,System.Int32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.Remove(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int32,System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int32,System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.RemoveRange(System.ValueTuple{System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeInt`1.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;int, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeInt`1.Count">
            <inheritdoc cref="!:D3Tree&lt;int, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeLong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.Insert(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.Contains(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.Remove(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.CreateBalanced(System.ValueTuple{System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.RemoveRange(System.ValueTuple{System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeLong.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;long&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeLong.Count">
            <inheritdoc cref="!:D3Tree&lt;long&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeLong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.Insert(System.ValueTuple{System.Int64,System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.InsertOrUpdate(System.ValueTuple{System.Int64,System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.Contains(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.GetValue(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.TryGetValue(System.ValueTuple{System.Int64,System.Int64,System.Int64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.Remove(System.ValueTuple{System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int64,System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int64,System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.RemoveRange(System.ValueTuple{System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeLong`1.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;long, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeLong`1.Count">
            <inheritdoc cref="!:D3Tree&lt;long, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeLong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeUInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.Insert(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.Contains(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.Remove(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.CreateBalanced(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeUInt.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;uint&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeUInt.Count">
            <inheritdoc cref="!:D3Tree&lt;uint&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeUInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.Insert(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.InsertOrUpdate(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.Contains(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.GetValue(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.TryGetValue(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.Remove(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeUInt`1.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;uint, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeUInt`1.Count">
            <inheritdoc cref="!:D3Tree&lt;uint, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeUInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeULong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.Insert(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.Contains(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.Remove(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.CreateBalanced(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeULong.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;ulong&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeULong.Count">
            <inheritdoc cref="!:D3Tree&lt;ulong&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D3TreeULong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.Insert(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.InsertOrUpdate(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.Contains(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.GetValue(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.TryGetValue(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.Remove(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeULong`1.IsEmpty">
            <inheritdoc cref="!:D3Tree&lt;ulong, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D3TreeULong`1.Count">
            <inheritdoc cref="!:D3Tree&lt;ulong, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3TreeULong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeDecimal">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.Insert(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.Contains(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.Remove(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.CreateBalanced(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDecimal.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;decimal&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDecimal.Count">
            <inheritdoc cref="!:D4Tree&lt;decimal&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeDecimal`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.Insert(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.InsertOrUpdate(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.Contains(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.GetValue(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.TryGetValue(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.Remove(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDecimal`1.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;decimal, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDecimal`1.Count">
            <inheritdoc cref="!:D4Tree&lt;decimal, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDecimal`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeDouble">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.Insert(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.Contains(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.Remove(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.CreateBalanced(System.ValueTuple{System.Double,System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.RemoveRange(System.ValueTuple{System.Double,System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double,System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDouble.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;double&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDouble.Count">
            <inheritdoc cref="!:D4Tree&lt;double&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeDouble`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.Insert(System.ValueTuple{System.Double,System.Double,System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.InsertOrUpdate(System.ValueTuple{System.Double,System.Double,System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.Contains(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.GetValue(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.TryGetValue(System.ValueTuple{System.Double,System.Double,System.Double,System.Double},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.Remove(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Double,System.Double,System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Double,System.Double,System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.RemoveRange(System.ValueTuple{System.Double,System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double,System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDouble`1.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;double, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeDouble`1.Count">
            <inheritdoc cref="!:D4Tree&lt;double, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeDouble`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeFloat">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.Insert(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.Contains(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.Remove(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.CreateBalanced(System.ValueTuple{System.Single,System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.RemoveRange(System.ValueTuple{System.Single,System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single,System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeFloat.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;float&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeFloat.Count">
            <inheritdoc cref="!:D4Tree&lt;float&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeFloat`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.Insert(System.ValueTuple{System.Single,System.Single,System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.InsertOrUpdate(System.ValueTuple{System.Single,System.Single,System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.Contains(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.GetValue(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.TryGetValue(System.ValueTuple{System.Single,System.Single,System.Single,System.Single},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.Remove(System.ValueTuple{System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Single,System.Single,System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Single,System.Single,System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.RemoveRange(System.ValueTuple{System.Single,System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single,System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeFloat`1.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;float, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeFloat`1.Count">
            <inheritdoc cref="!:D4Tree&lt;float, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeFloat`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.Insert(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.Contains(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.Remove(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.CreateBalanced(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.RemoveRange(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeInt.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;int&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeInt.Count">
            <inheritdoc cref="!:D4Tree&lt;int&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.Insert(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.InsertOrUpdate(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.Contains(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.GetValue(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.TryGetValue(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.Remove(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.RemoveRange(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeInt`1.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;int, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeInt`1.Count">
            <inheritdoc cref="!:D4Tree&lt;int, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeLong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.Insert(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.Contains(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.Remove(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.CreateBalanced(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.RemoveRange(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeLong.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;long&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeLong.Count">
            <inheritdoc cref="!:D4Tree&lt;long&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeLong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.Insert(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.InsertOrUpdate(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.Contains(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.GetValue(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.TryGetValue(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.Remove(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.RemoveRange(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeLong`1.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;long, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeLong`1.Count">
            <inheritdoc cref="!:D4Tree&lt;long, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeLong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeUInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.Insert(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.Contains(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.Remove(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.CreateBalanced(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeUInt.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;uint&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeUInt.Count">
            <inheritdoc cref="!:D4Tree&lt;uint&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeUInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.Insert(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.InsertOrUpdate(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.Contains(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.GetValue(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.TryGetValue(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.Remove(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeUInt`1.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;uint, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeUInt`1.Count">
            <inheritdoc cref="!:D4Tree&lt;uint, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeUInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeULong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.Insert(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.Contains(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.Remove(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.CreateBalanced(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeULong.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;ulong&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeULong.Count">
            <inheritdoc cref="!:D4Tree&lt;ulong&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D4TreeULong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.Insert(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.InsertOrUpdate(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.Contains(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.GetValue(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.TryGetValue(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.Remove(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeULong`1.IsEmpty">
            <inheritdoc cref="!:D4Tree&lt;ulong, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D4TreeULong`1.Count">
            <inheritdoc cref="!:D4Tree&lt;ulong, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4TreeULong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeDecimal">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.Insert(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.Contains(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.Remove(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.CreateBalanced(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDecimal.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;decimal&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDecimal.Count">
            <inheritdoc cref="!:D5Tree&lt;decimal&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeDecimal`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.Insert(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.InsertOrUpdate(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.Contains(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.GetValue(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.TryGetValue(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.FindNearestNeighbour(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.Remove(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.RemoveRange(System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDecimal`1.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;decimal, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDecimal`1.Count">
            <inheritdoc cref="!:D5Tree&lt;decimal, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDecimal`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeDouble">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.Insert(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.Contains(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.Remove(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.CreateBalanced(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.RemoveRange(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDouble.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;double&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDouble.Count">
            <inheritdoc cref="!:D5Tree&lt;double&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeDouble`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.Insert(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.InsertOrUpdate(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.Contains(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.GetValue(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.TryGetValue(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.FindNearestNeighbour(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.Remove(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.RemoveRange(System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double,System.Double,System.Double,System.Double}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDouble`1.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;double, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeDouble`1.Count">
            <inheritdoc cref="!:D5Tree&lt;double, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeDouble`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeFloat">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.Insert(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.Contains(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.Remove(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.CreateBalanced(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.RemoveRange(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeFloat.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;float&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeFloat.Count">
            <inheritdoc cref="!:D5Tree&lt;float&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeFloat`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.Insert(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.InsertOrUpdate(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.Contains(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.GetValue(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.TryGetValue(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.FindNearestNeighbour(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.Remove(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.RemoveRange(System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,System.Single,System.Single,System.Single,System.Single}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeFloat`1.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;float, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeFloat`1.Count">
            <inheritdoc cref="!:D5Tree&lt;float, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeFloat`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.Insert(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.Contains(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.Remove(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.CreateBalanced(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.RemoveRange(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeInt.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;int&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeInt.Count">
            <inheritdoc cref="!:D5Tree&lt;int&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.Insert(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.InsertOrUpdate(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.Contains(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.GetValue(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.TryGetValue(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.FindNearestNeighbour(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.Remove(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.RemoveRange(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32,System.Int32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeInt`1.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;int, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeInt`1.Count">
            <inheritdoc cref="!:D5Tree&lt;int, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeLong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.Insert(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.Contains(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.Remove(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.CreateBalanced(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.RemoveRange(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeLong.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;long&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeLong.Count">
            <inheritdoc cref="!:D5Tree&lt;long&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeLong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.Insert(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.InsertOrUpdate(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.Contains(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.GetValue(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.TryGetValue(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.FindNearestNeighbour(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.Remove(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.RemoveRange(System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int64,System.Int64,System.Int64,System.Int64,System.Int64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeLong`1.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;long, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeLong`1.Count">
            <inheritdoc cref="!:D5Tree&lt;long, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeLong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeUInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.Insert(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.Contains(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.Remove(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.CreateBalanced(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeUInt.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;uint&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeUInt.Count">
            <inheritdoc cref="!:D5Tree&lt;uint&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeUInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.Insert(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.InsertOrUpdate(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.Contains(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.GetValue(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.TryGetValue(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.FindNearestNeighbour(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.Remove(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.RemoveRange(System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeUInt`1.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;uint, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeUInt`1.Count">
            <inheritdoc cref="!:D5Tree&lt;uint, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeUInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeULong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.Insert(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.Contains(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.Remove(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.CreateBalanced(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeULong.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;ulong&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeULong.Count">
            <inheritdoc cref="!:D5Tree&lt;ulong&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D5TreeULong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.#ctor">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.Insert(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.InsertOrUpdate(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.Contains(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.GetValue(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.TryGetValue(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.FindNearestNeighbour(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.Remove(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.CreateBalanced(System.ValueTuple{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64},`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.RemoveRange(System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeULong`1.IsEmpty">
            <inheritdoc cref="!:D5Tree&lt;ulong, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.D5TreeULong`1.Count">
            <inheritdoc cref="!:D5Tree&lt;ulong, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5TreeULong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeDecimal">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.Insert(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.Contains(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.FindNearestNeighbour(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.Remove(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.CreateBalanced(System.Decimal[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.RemoveRange(System.Decimal[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.RemoveRange(System.Collections.Generic.IEnumerable{System.Decimal[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDecimal.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;decimal&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDecimal.Count">
            <inheritdoc cref="!:KDTree&lt;decimal&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeDecimal`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.Insert(System.Decimal[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.InsertOrUpdate(System.Decimal[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.Contains(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.GetValue(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.TryGetValue(System.Decimal[],`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.FindNearestNeighbour(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.Remove(System.Decimal[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.CreateBalanced(System.ValueTuple{System.Decimal[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.Decimal[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.RemoveRange(System.Decimal[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.RemoveRange(System.Collections.Generic.IEnumerable{System.Decimal[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDecimal`1.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;decimal, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDecimal`1.Count">
            <inheritdoc cref="!:KDTree&lt;decimal, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDecimal`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeDouble">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.Insert(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.Contains(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.FindNearestNeighbour(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.Remove(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.CreateBalanced(System.Double[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.RemoveRange(System.Double[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.RemoveRange(System.Collections.Generic.IEnumerable{System.Double[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDouble.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;double&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDouble.Count">
            <inheritdoc cref="!:KDTree&lt;double&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeDouble`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.Insert(System.Double[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.InsertOrUpdate(System.Double[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.Contains(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.GetValue(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.TryGetValue(System.Double[],`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.FindNearestNeighbour(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.Remove(System.Double[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.CreateBalanced(System.ValueTuple{System.Double[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.Double[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.RemoveRange(System.Double[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.RemoveRange(System.Collections.Generic.IEnumerable{System.Double[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDouble`1.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;double, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeDouble`1.Count">
            <inheritdoc cref="!:KDTree&lt;double, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeDouble`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeFloat">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.Insert(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.Contains(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.FindNearestNeighbour(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.Remove(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.CreateBalanced(System.Single[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.RemoveRange(System.Single[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.RemoveRange(System.Collections.Generic.IEnumerable{System.Single[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeFloat.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;float&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeFloat.Count">
            <inheritdoc cref="!:KDTree&lt;float&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeFloat`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.Insert(System.Single[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.InsertOrUpdate(System.Single[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.Contains(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.GetValue(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.TryGetValue(System.Single[],`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.FindNearestNeighbour(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.Remove(System.Single[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.CreateBalanced(System.ValueTuple{System.Single[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.Single[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.RemoveRange(System.Single[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.RemoveRange(System.Collections.Generic.IEnumerable{System.Single[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeFloat`1.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;float, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeFloat`1.Count">
            <inheritdoc cref="!:KDTree&lt;float, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeFloat`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.Insert(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.Contains(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.FindNearestNeighbour(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.Remove(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.CreateBalanced(System.Int32[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.RemoveRange(System.Int32[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeInt.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;int&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeInt.Count">
            <inheritdoc cref="!:KDTree&lt;int&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.Insert(System.Int32[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.InsertOrUpdate(System.Int32[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.Contains(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.GetValue(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.TryGetValue(System.Int32[],`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.FindNearestNeighbour(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.Remove(System.Int32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.CreateBalanced(System.ValueTuple{System.Int32[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.Int32[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.RemoveRange(System.Int32[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeInt`1.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;int, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeInt`1.Count">
            <inheritdoc cref="!:KDTree&lt;int, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeLong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.Insert(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.Contains(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.FindNearestNeighbour(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.Remove(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.CreateBalanced(System.Int64[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.RemoveRange(System.Int64[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.RemoveRange(System.Collections.Generic.IEnumerable{System.Int64[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeLong.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;long&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeLong.Count">
            <inheritdoc cref="!:KDTree&lt;long&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeLong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.Insert(System.Int64[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.InsertOrUpdate(System.Int64[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.Contains(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.GetValue(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.TryGetValue(System.Int64[],`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.FindNearestNeighbour(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.Remove(System.Int64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.CreateBalanced(System.ValueTuple{System.Int64[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.Int64[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.RemoveRange(System.Int64[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.Int64[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeLong`1.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;long, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeLong`1.Count">
            <inheritdoc cref="!:KDTree&lt;long, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeLong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeUInt">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.Insert(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.Contains(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.FindNearestNeighbour(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.Remove(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.CreateBalanced(System.UInt32[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.RemoveRange(System.UInt32[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.RemoveRange(System.Collections.Generic.IEnumerable{System.UInt32[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeUInt.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;uint&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeUInt.Count">
            <inheritdoc cref="!:KDTree&lt;uint&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeUInt`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.Insert(System.UInt32[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.InsertOrUpdate(System.UInt32[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.Contains(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.GetValue(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.TryGetValue(System.UInt32[],`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.FindNearestNeighbour(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.Remove(System.UInt32[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.CreateBalanced(System.ValueTuple{System.UInt32[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.UInt32[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.RemoveRange(System.UInt32[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.RemoveRange(System.Collections.Generic.IEnumerable{System.UInt32[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeUInt`1.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;uint, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeUInt`1.Count">
            <inheritdoc cref="!:KDTree&lt;uint, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeUInt`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeULong">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.Insert(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.Contains(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.FindNearestNeighbour(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`1.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.Remove(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.CreateBalanced(System.UInt64[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.RemoveRange(System.UInt64[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.RemoveRange(System.Collections.Generic.IEnumerable{System.UInt64[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeULong.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;ulong&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeULong.Count">
            <inheritdoc cref="!:KDTree&lt;ulong&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.KDTreeULong`1">
            <summary>
            Stores keys and values in a KD tree structure.
            </summary>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.Insert(System.UInt64[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.InsertOrUpdate(System.UInt64[],`0)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.Contains(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.GetValue(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.TryGetValue(System.UInt64[],`0@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.FindNearestNeighbour(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndex`2.FindNearestNeighbour(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.Remove(System.UInt64[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.CreateBalanced(System.ValueTuple{System.UInt64[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.CreateBalanced(System.Collections.Generic.KeyValuePair{System.UInt64[],`0}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.RemoveRange(System.UInt64[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.RemoveRange(System.Collections.Generic.IEnumerable{System.UInt64[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeULong`1.IsEmpty">
            <inheritdoc cref="!:KDTree&lt;ulong, TValue&gt;.IsEmpty"/>
        </member>
        <member name="P:Enderlook.Collections.KDTreeULong`1.Count">
            <inheritdoc cref="!:KDTree&lt;ulong, TValue&gt;.Count"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTreeULong`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:Enderlook.Collections.D2Tree`1">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Insert(System.ValueTuple{`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Insert(Enderlook.Collections.D2Tree{`0}.Node,System.ValueTuple{`0,`0},System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Contains(System.ValueTuple{`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Search(System.ValueTuple{`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.FindMin(Enderlook.Collections.D2Tree{`0}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.FindMin(Enderlook.Collections.D2Tree{`0}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Min(Enderlook.Collections.D2Tree{`0}.Node,Enderlook.Collections.D2Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Min(Enderlook.Collections.D2Tree{`0}.Node,Enderlook.Collections.D2Tree{`0}.Node,Enderlook.Collections.D2Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Remove(System.ValueTuple{`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.Remove(Enderlook.Collections.D2Tree{`0}.Node,System.ValueTuple{`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D2Tree`1.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D2Tree`1.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.CreateBalanced(System.ValueTuple{`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.RemoveRange(System.ValueTuple{`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.D2Tree`2">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Insert(System.ValueTuple{`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Insert(Enderlook.Collections.D2Tree{`0,`1}.Node,System.ValueTuple{`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.InsertOrUpdate(System.ValueTuple{`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.InsertOrUpdate(Enderlook.Collections.D2Tree{`0,`1}.Node,System.ValueTuple{`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Contains(System.ValueTuple{`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.GetValue(System.ValueTuple{`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.TryGetValue(System.ValueTuple{`0,`0},`1@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Search(System.ValueTuple{`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.FindMin(Enderlook.Collections.D2Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.FindMin(Enderlook.Collections.D2Tree{`0,`1}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Min(Enderlook.Collections.D2Tree{`0,`1}.Node,Enderlook.Collections.D2Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Min(Enderlook.Collections.D2Tree{`0,`1}.Node,Enderlook.Collections.D2Tree{`0,`1}.Node,Enderlook.Collections.D2Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Remove(System.ValueTuple{`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.Remove(Enderlook.Collections.D2Tree{`0,`1}.Node,System.ValueTuple{`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D2Tree`2.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D2Tree`2.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.CreateBalanced(System.ValueTuple{System.ValueTuple{`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.RemoveRange(System.ValueTuple{`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D2Tree`2.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.D3Tree`1">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Insert(System.ValueTuple{`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Insert(Enderlook.Collections.D3Tree{`0}.Node,System.ValueTuple{`0,`0,`0},System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Contains(System.ValueTuple{`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Search(System.ValueTuple{`0,`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.FindMin(Enderlook.Collections.D3Tree{`0}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.FindMin(Enderlook.Collections.D3Tree{`0}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Min(Enderlook.Collections.D3Tree{`0}.Node,Enderlook.Collections.D3Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Min(Enderlook.Collections.D3Tree{`0}.Node,Enderlook.Collections.D3Tree{`0}.Node,Enderlook.Collections.D3Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Remove(System.ValueTuple{`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.Remove(Enderlook.Collections.D3Tree{`0}.Node,System.ValueTuple{`0,`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D3Tree`1.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D3Tree`1.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.CreateBalanced(System.ValueTuple{`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.RemoveRange(System.ValueTuple{`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.D3Tree`2">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Insert(System.ValueTuple{`0,`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Insert(Enderlook.Collections.D3Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.InsertOrUpdate(System.ValueTuple{`0,`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.InsertOrUpdate(Enderlook.Collections.D3Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Contains(System.ValueTuple{`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.GetValue(System.ValueTuple{`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.TryGetValue(System.ValueTuple{`0,`0,`0},`1@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Search(System.ValueTuple{`0,`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.FindMin(Enderlook.Collections.D3Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.FindMin(Enderlook.Collections.D3Tree{`0,`1}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Min(Enderlook.Collections.D3Tree{`0,`1}.Node,Enderlook.Collections.D3Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Min(Enderlook.Collections.D3Tree{`0,`1}.Node,Enderlook.Collections.D3Tree{`0,`1}.Node,Enderlook.Collections.D3Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Remove(System.ValueTuple{`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.Remove(Enderlook.Collections.D3Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D3Tree`2.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D3Tree`2.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.CreateBalanced(System.ValueTuple{System.ValueTuple{`0,`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.RemoveRange(System.ValueTuple{`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D3Tree`2.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.D4Tree`1">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Insert(System.ValueTuple{`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Insert(Enderlook.Collections.D4Tree{`0}.Node,System.ValueTuple{`0,`0,`0,`0},System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Contains(System.ValueTuple{`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Search(System.ValueTuple{`0,`0,`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.FindMin(Enderlook.Collections.D4Tree{`0}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.FindMin(Enderlook.Collections.D4Tree{`0}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Min(Enderlook.Collections.D4Tree{`0}.Node,Enderlook.Collections.D4Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Min(Enderlook.Collections.D4Tree{`0}.Node,Enderlook.Collections.D4Tree{`0}.Node,Enderlook.Collections.D4Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Remove(System.ValueTuple{`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.Remove(Enderlook.Collections.D4Tree{`0}.Node,System.ValueTuple{`0,`0,`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D4Tree`1.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D4Tree`1.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.CreateBalanced(System.ValueTuple{`0,`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.RemoveRange(System.ValueTuple{`0,`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0,`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.D4Tree`2">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Insert(System.ValueTuple{`0,`0,`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Insert(Enderlook.Collections.D4Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.InsertOrUpdate(System.ValueTuple{`0,`0,`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.InsertOrUpdate(Enderlook.Collections.D4Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Contains(System.ValueTuple{`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.GetValue(System.ValueTuple{`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.TryGetValue(System.ValueTuple{`0,`0,`0,`0},`1@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Search(System.ValueTuple{`0,`0,`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.FindMin(Enderlook.Collections.D4Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.FindMin(Enderlook.Collections.D4Tree{`0,`1}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Min(Enderlook.Collections.D4Tree{`0,`1}.Node,Enderlook.Collections.D4Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Min(Enderlook.Collections.D4Tree{`0,`1}.Node,Enderlook.Collections.D4Tree{`0,`1}.Node,Enderlook.Collections.D4Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Remove(System.ValueTuple{`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.Remove(Enderlook.Collections.D4Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D4Tree`2.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D4Tree`2.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.CreateBalanced(System.ValueTuple{System.ValueTuple{`0,`0,`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`0,`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.RemoveRange(System.ValueTuple{`0,`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D4Tree`2.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0,`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.D5Tree`1">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Insert(System.ValueTuple{`0,`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Insert(Enderlook.Collections.D5Tree{`0}.Node,System.ValueTuple{`0,`0,`0,`0,`0},System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Contains(System.ValueTuple{`0,`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Search(System.ValueTuple{`0,`0,`0,`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.FindMin(Enderlook.Collections.D5Tree{`0}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.FindMin(Enderlook.Collections.D5Tree{`0}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Min(Enderlook.Collections.D5Tree{`0}.Node,Enderlook.Collections.D5Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Min(Enderlook.Collections.D5Tree{`0}.Node,Enderlook.Collections.D5Tree{`0}.Node,Enderlook.Collections.D5Tree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Remove(System.ValueTuple{`0,`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.Remove(Enderlook.Collections.D5Tree{`0}.Node,System.ValueTuple{`0,`0,`0,`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D5Tree`1.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D5Tree`1.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.CreateBalanced(System.ValueTuple{`0,`0,`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.RemoveRange(System.ValueTuple{`0,`0,`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`1.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0,`0,`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.D5Tree`2">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Insert(System.ValueTuple{`0,`0,`0,`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Insert(Enderlook.Collections.D5Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0,`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.InsertOrUpdate(System.ValueTuple{`0,`0,`0,`0,`0},`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.InsertOrUpdate(Enderlook.Collections.D5Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0,`0,`0},`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Contains(System.ValueTuple{`0,`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.GetValue(System.ValueTuple{`0,`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.TryGetValue(System.ValueTuple{`0,`0,`0,`0,`0},`1@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Search(System.ValueTuple{`0,`0,`0,`0,`0})">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.FindMin(Enderlook.Collections.D5Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.FindMin(Enderlook.Collections.D5Tree{`0,`1}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Min(Enderlook.Collections.D5Tree{`0,`1}.Node,Enderlook.Collections.D5Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Min(Enderlook.Collections.D5Tree{`0,`1}.Node,Enderlook.Collections.D5Tree{`0,`1}.Node,Enderlook.Collections.D5Tree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Remove(System.ValueTuple{`0,`0,`0,`0,`0})">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.Remove(Enderlook.Collections.D5Tree{`0,`1}.Node,System.ValueTuple{`0,`0,`0,`0,`0},System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.D5Tree`2.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.D5Tree`2.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.CreateBalanced(System.ValueTuple{System.ValueTuple{`0,`0,`0,`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.CreateBalanced(System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`0,`0,`0,`0},`1}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.RemoveRange(System.ValueTuple{`0,`0,`0,`0,`0}[])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.D5Tree`2.RemoveRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`0,`0,`0,`0}})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.KDTree`1">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Insert(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`1.Insert(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Insert(Enderlook.Collections.KDTree{`0}.Node,`0[],System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Contains(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Search(`0[])">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.FindMin(Enderlook.Collections.KDTree{`0}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.FindMin(Enderlook.Collections.KDTree{`0}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Min(Enderlook.Collections.KDTree{`0}.Node,Enderlook.Collections.KDTree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Min(Enderlook.Collections.KDTree{`0}.Node,Enderlook.Collections.KDTree{`0}.Node,Enderlook.Collections.KDTree{`0}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Remove(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.Remove(Enderlook.Collections.KDTree{`0}.Node,`0[],System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.KDTree`1.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.KDTree`1.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.CreateBalanced(`0[][],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.RemoveRange(`0[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`1.RemoveRange(System.Collections.Generic.IEnumerable{`0[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.KDTree`2">
            <inheritdoc cref="T:Enderlook.Collections.ISpatialIndexBasic`2"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.#ctor(System.Int32)">
            <summary>
            Creates kd tree of a given number of dimensions.
            </summary>
            <param name="dimensions">Amount of dimensions.</param>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Insert(`0[],`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Insert(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Insert(Enderlook.Collections.KDTree{`0,`1}.Node,`0[],`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.InsertOrUpdate(`0[],`1)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.InsertOrUpdate(`0,`1)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.InsertOrUpdate(Enderlook.Collections.KDTree{`0,`1}.Node,`0[],`1,System.Int32)">
            <summary>
            Inserts a new node.
            </summary>
            <param name="root">Root node.</param>
            <param name="key">Key of the node to insert.</param>
            <param name="value">Value of the node to insert.</param>
            <param name="depth">Depth used to determine which key's index to compare.</param>
            <returns>New root and whenever there was a previous value there.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Contains(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Contains(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.GetValue(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.GetValue(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.TryGetValue(`0[],`1@)">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Search(`0[])">
            <summary>
            Search a node given its key.
            </summary>
            <param name="key">Key of the node to search.</param>
            <returns>Searched node, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.FindMin(Enderlook.Collections.KDTree{`0,`1}.Node,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Node to lo</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.FindMin(Enderlook.Collections.KDTree{`0,`1}.Node,System.Int32,System.Int32)">
            <summary>
            Finds the minimum key of a given <paramref name="dimension"/> axi.
            </summary>
            <param name="root">Root node to look for.</param>
            <param name="dimension">The mininum value of this dimension will be looked for.</param>
            <param name="depth">Depth used to determine the current key's index.</param>
            <returns>Minimum value of the looked for dimension, if any.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Min(Enderlook.Collections.KDTree{`0,`1}.Node,Enderlook.Collections.KDTree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Min(Enderlook.Collections.KDTree{`0,`1}.Node,Enderlook.Collections.KDTree{`0,`1}.Node,Enderlook.Collections.KDTree{`0,`1}.Node,System.Int32)">
            <summary>
            Determines the node with the lowest key in one axis.
            </summary>
            <param name="n1">Node to compare.</param>
            <param name="n2">Node to compare.</param>
            <param name="n3">Node to compare.</param>
            <param name="dimension">Dimension to compare in each node.</param>
            <returns>Node with the lowest value in the specified key's index.</returns>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Remove(`0[])">
            <inheritdoc cref="M:Enderlook.Collections.ISpatialIndexBasic`2.Remove(`0)"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.Remove(Enderlook.Collections.KDTree{`0,`1}.Node,`0[],System.Int32)">
            <summary>
            Remove a node which has the given key.
            </summary>
            <param name="root">Root node to look for the node to remove.</param>
            <param name="key">Key of node to remove.</param>
            <param name="depth"></param>
            <returns>New root.</returns>
        </member>
        <member name="P:Enderlook.Collections.KDTree`2.IsEmpty">
            <summary>
            Whenever this tree is empty.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.KDTree`2.Count">
            <summary>
            Returns the count of elements in this tree.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.CreateBalanced(System.ValueTuple{`0[],`1}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.CreateBalanced(System.Collections.Generic.KeyValuePair{`0[],`1}[],System.Int32)">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.RemoveRange(`0[][])">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(TKey[])"/>
        </member>
        <member name="M:Enderlook.Collections.KDTree`2.RemoveRange(System.Collections.Generic.IEnumerable{`0[]})">
            <inheritdoc cref="!:ISpatialIndexBasic&lt;TKey, TValue&gt;.RemoveRange(IEnumerable&lt;TKey&gt;)"/>
        </member>
        <member name="T:Enderlook.Collections.SortedList`1">
            <summary>
            List data structured which store elements in a sorted way.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.Capacity">
            <summary>
            Internal capacity of this <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.Count">
            <summary>
             How may elements are in this <see cref="T:Enderlook.Collections.SortedList`1"/>
            </summary>
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.System#Collections#IList#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.System#Collections#IList#IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Enderlook.Collections.SortedList`1.Item(System.Int32)">
            <summary>
            Gets the element at the given <paramref name="index"/>.
            </summary>
            <param name="index">Index of element.</param>
            <returns>Element at <paramref name="index"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a sorted list.
            </summary>
            <param name="comparer">Comparer used to sort elements.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.#ctor">
            <summary>
            Creates a sorted list.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a sorted list.
            </summary>
            <param name="capacity">Initial capacity of its backign array.</param>
            <param name="comparer">Comparer used to sort elements.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.Add(`0)">
            <summary>
            Adds the given <paramref name="item"/> to this <see cref="T:Enderlook.Collections.SortedList`1"/> in a sorted index.
            </summary>
            <param name="item">Element to add.</param>
            <returns>Index where this <paramref name="item"/> was added.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add the elements in <paramref name="collection"/> to this <see cref="T:Enderlook.Collections.SortedList`1"/>. Elements will added sorted.
            </summary>
            <param name="collection">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            Add the elements in <paramref name="collection"/> to this <see cref="T:Enderlook.Collections.SortedList`1"/>. Elements will added sorted.
            </summary>
            <param name="collection">Elements to add.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.AsReadOnly">
            <summary>
            Produces a readonly version of this <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <returns>Readonly version of this <see cref="T:Enderlook.Collections.SortedList`1"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.BinarySearch(`0)">
            <summary>
            Uses a binary search algorithm to locate the element <paramref name="item"/> in this <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="item">The object to locate. The value can be <see langword="null"/> for reference types.</param>
            <returns>The zero-based index of <paramref name="item"/> in this <see cref="T:Enderlook.Collections.SortedList`1"/>, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:Enderlook.Collections.SortedList`1.Count"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.BinarySearch(System.Int32,System.Int32,`0)">
            <summary>
            Uses a binary search algorithm to locate the element <paramref name="item"/> in this <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be <see langword="null"/> for reference types.</param>
            <returns>The zero-based index of <paramref name="item"/> in this <see cref="T:Enderlook.Collections.SortedList`1"/>, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:Enderlook.Collections.SortedList`1.Count"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.Clear">
            <summary>
            Clear the content of this <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.CopyTo(`0[])">
            <summary>
            Copies the content of this <see cref="T:Enderlook.Collections.SortedList`1"/> to <paramref name="array"/>.
            </summary>
            <param name="array">Array where elements will be copied to.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a section of this <see cref="T:Enderlook.Collections.SortedList`1"/> to <paramref name="array"/>.
            </summary>
            <param name="index">Starting index in this <see cref="T:Enderlook.Collections.SortedList`1"/>.</param>
            <param name="array">Array where elements will be copied to.</param>
            <param name="arrayIndex">Starting index in the target <paramref name="array"/>.</param>
            <param name="count">Amount of elements to be copied.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.GetRangeList(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in this <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="index">The zero-based <see cref="T:Enderlook.Collections.SortedList`1"/> index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source <see cref="T:Enderlook.Collections.SortedList`1"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in this <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="index">The zero-based <see cref="T:Enderlook.Collections.SortedList`1"/> index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source <see cref="T:Enderlook.Collections.SortedList`1"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Enderlook.Collections.SortedList`1"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Enderlook.Collections.SortedList`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:Enderlook.Collections.SortedList`1"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Enderlook.Collections.SortedList`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:Enderlook.Collections.SortedList`1"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.RemoveElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the elements in <paramref name="collection"/> from <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="collection">Elements to remove from <see cref="T:Enderlook.Collections.SortedList`1"/>.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.RemoveElements(System.Collections.IEnumerable)">
            <summary>
            Removes the elements in <paramref name="collection"/> from <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="collection">Elements to remove from <see cref="T:Enderlook.Collections.SortedList`1"/>.</param>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Enderlook.Collections.SortedList`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Enderlook.Collections.SortedList`1"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.ToList">
            <summary>
            Copies the elements of the <see cref="T:Enderlook.Collections.SortedList`1"/> to a new <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing copies of the elements of the <see cref="T:Enderlook.Collections.SortedList`1"/>.</returns>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.TrimExcess">
            <summary>
            Sets the <see cref="P:Enderlook.Collections.SortedList`1.Capacity"/> to <see cref="P:Enderlook.Collections.SortedList`1.Count"/> minimizing the memory overhead.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.Insert(System.Int32,`0)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.Insert(System.Int32,System.Object)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Enderlook.Collections.SortedList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:Enderlook.Collections.SortedList`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action"/> delegate to perform on each element of the <see cref="T:Enderlook.Collections.SortedList`1"/>.</param>
        </member>
    </members>
</doc>
